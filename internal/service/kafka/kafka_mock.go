// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/kafka/kafka.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/kafka/kafka.go -destination=./internal/service/kafka/kafka_mock.go -package=kafka
//

// Package kafka is a generated GoMock package.
package kafka

import (
	reflect "reflect"

	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockkafkaClient is a mock of kafkaClient interface.
type MockkafkaClient struct {
	ctrl     *gomock.Controller
	recorder *MockkafkaClientMockRecorder
	isgomock struct{}
}

// MockkafkaClientMockRecorder is the mock recorder for MockkafkaClient.
type MockkafkaClientMockRecorder struct {
	mock *MockkafkaClient
}

// NewMockkafkaClient creates a new mock instance.
func NewMockkafkaClient(ctrl *gomock.Controller) *MockkafkaClient {
	mock := &MockkafkaClient{ctrl: ctrl}
	mock.recorder = &MockkafkaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkafkaClient) EXPECT() *MockkafkaClientMockRecorder {
	return m.recorder
}

// WriteMessages mocks base method.
func (m *MockkafkaClient) WriteMessages(msgs ...kafka.Message) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range msgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockkafkaClientMockRecorder) WriteMessages(msgs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockkafkaClient)(nil).WriteMessages), msgs...)
}
