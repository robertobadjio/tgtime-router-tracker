// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/tracker/tracker.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/tracker/tracker.go -destination=./internal/service/tracker/tracker_mock.go -package=tracker
//

// Package tracker is a generated GoMock package.
package tracker

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockrouterService is a mock of routerService interface.
type MockrouterService struct {
	ctrl     *gomock.Controller
	recorder *MockrouterServiceMockRecorder
	isgomock struct{}
}

// MockrouterServiceMockRecorder is the mock recorder for MockrouterService.
type MockrouterServiceMockRecorder struct {
	mock *MockrouterService
}

// NewMockrouterService creates a new mock instance.
func NewMockrouterService(ctrl *gomock.Controller) *MockrouterService {
	mock := &MockrouterService{ctrl: ctrl}
	mock.recorder = &MockrouterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrouterService) EXPECT() *MockrouterServiceMockRecorder {
	return m.recorder
}

// GetMacAddresses mocks base method.
func (m *MockrouterService) GetMacAddresses() (map[uint][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMacAddresses")
	ret0, _ := ret[0].(map[uint][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMacAddresses indicates an expected call of GetMacAddresses.
func (mr *MockrouterServiceMockRecorder) GetMacAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMacAddresses", reflect.TypeOf((*MockrouterService)(nil).GetMacAddresses))
}

// Mockkafka is a mock of kafka interface.
type Mockkafka struct {
	ctrl     *gomock.Controller
	recorder *MockkafkaMockRecorder
	isgomock struct{}
}

// MockkafkaMockRecorder is the mock recorder for Mockkafka.
type MockkafkaMockRecorder struct {
	mock *Mockkafka
}

// NewMockkafka creates a new mock instance.
func NewMockkafka(ctrl *gomock.Controller) *Mockkafka {
	mock := &Mockkafka{ctrl: ctrl}
	mock.recorder = &MockkafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockkafka) EXPECT() *MockkafkaMockRecorder {
	return m.recorder
}

// ProduceInOffice mocks base method.
func (m *Mockkafka) ProduceInOffice(macAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceInOffice", macAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceInOffice indicates an expected call of ProduceInOffice.
func (mr *MockkafkaMockRecorder) ProduceInOffice(macAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceInOffice", reflect.TypeOf((*Mockkafka)(nil).ProduceInOffice), macAddress)
}

// Mockaggregator is a mock of aggregator interface.
type Mockaggregator struct {
	ctrl     *gomock.Controller
	recorder *MockaggregatorMockRecorder
	isgomock struct{}
}

// MockaggregatorMockRecorder is the mock recorder for Mockaggregator.
type MockaggregatorMockRecorder struct {
	mock *Mockaggregator
}

// NewMockaggregator creates a new mock instance.
func NewMockaggregator(ctrl *gomock.Controller) *Mockaggregator {
	mock := &Mockaggregator{ctrl: ctrl}
	mock.recorder = &MockaggregatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockaggregator) EXPECT() *MockaggregatorMockRecorder {
	return m.recorder
}

// CreateTime mocks base method.
func (m *Mockaggregator) CreateTime(ctx context.Context, macAddress string, seconds, routerID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTime", ctx, macAddress, seconds, routerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTime indicates an expected call of CreateTime.
func (mr *MockaggregatorMockRecorder) CreateTime(ctx, macAddress, seconds, routerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTime", reflect.TypeOf((*Mockaggregator)(nil).CreateTime), ctx, macAddress, seconds, routerID)
}
