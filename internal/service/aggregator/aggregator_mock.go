// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/aggregator/aggregator.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/aggregator/aggregator.go -destination=./internal/service/aggregator/aggregator_mock.go -package=aggregator
//

// Package aggregator is a generated GoMock package.
package aggregator

import (
	context "context"
	reflect "reflect"

	time_v1 "github.com/robertobadjio/tgtime-aggregator/pkg/api/time_v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MocktimeAggregatorClient is a mock of timeAggregatorClient interface.
type MocktimeAggregatorClient struct {
	ctrl     *gomock.Controller
	recorder *MocktimeAggregatorClientMockRecorder
	isgomock struct{}
}

// MocktimeAggregatorClientMockRecorder is the mock recorder for MocktimeAggregatorClient.
type MocktimeAggregatorClientMockRecorder struct {
	mock *MocktimeAggregatorClient
}

// NewMocktimeAggregatorClient creates a new mock instance.
func NewMocktimeAggregatorClient(ctrl *gomock.Controller) *MocktimeAggregatorClient {
	mock := &MocktimeAggregatorClient{ctrl: ctrl}
	mock.recorder = &MocktimeAggregatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeAggregatorClient) EXPECT() *MocktimeAggregatorClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MocktimeAggregatorClient) Create(ctx context.Context, in *time_v1.CreateRequest, opts ...grpc.CallOption) (*time_v1.CreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*time_v1.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MocktimeAggregatorClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocktimeAggregatorClient)(nil).Create), varargs...)
}
